env: "local"
service: "gabfav_es_cqrs_es-"${env}


akka {
  jvm-exit-on-fatal-error = false
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  loglevel = "DEBUG"
  log-config-on-start = "off"
  log-dead-letters = 100
  log-dead-letters-during-shutdown = off

  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      unhandled = on
    }
    // cluster
    provider = cluster
    // persistence
    extensions = [akka.persistence.Persistence]

    // serialization
    //allow-java-serialization = off
    //serialize-messages = on

    serializers.proto = "akka.remote.serialization.ProtobufSerializer"
    serialization-bindings {
      # protobuf messages
      "it.gabfav.es_cqrs_es.domain.proto.bankAccount.BankAccountMessage" = proto
      "it.gabfav.es_cqrs_es.domain.proto.bankAccount.BankAccountCreatedMessage" = proto
      "it.gabfav.es_cqrs_es.domain.proto.bankAccount.AmountAddedMessage" = proto
      "it.gabfav.es_cqrs_es.domain.proto.bankAccount.AmountSubtractedMessage" = proto
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
    log-remote-lifecycle-events = off
  }

  cluster {
    seed-nodes = ["akka.tcp://"${service}"@127.0.0.1:2551"]

    failure-detector {
      acceptable-heartbeat-pause = 1 second
      hearbeat-interval = 250 milliseconds
      threshold = 4.0
    }

    sharding.remember-entities = on
  }

  persistence {
    journal {
      auto-start-journals = [""]
      plugin = cassandra-journal
    }

    snapshot-store {
      plugin = cassandra-snapshot-store
    }
  }
}


cassandra-journal {
  # Comma-separated list of contact points in the cluster.
  contact-points = ["localhost"]
  port = 32784
  keyspace = ${env}"_bankaccount_akka_journal"

  event-adapters {
    bankaccount = "it.gabfav.es_cqrs_es.adapter.BankAccountAdapter"
  }

  event-adapter-bindings {
    # event traits
    "it.gabfav.es_cqrs_es.domain.BankAccount$BankAccountCreated" = bankaccount
    "it.gabfav.es_cqrs_es.domain.BankAccount$AmountAdded" = bankaccount
    "it.gabfav.es_cqrs_es.domain.BankAccount$AmountSubtracted" = bankaccount
    # protobuf messages
    "it.gabfav.es_cqrs_es.domain.proto.bankAccount.AmountAddedMessage" = bankaccount
    "it.gabfav.es_cqrs_es.domain.proto.bankAccount.AmountSubtractedMessage" = bankaccount
    "it.gabfav.es_cqrs_es.domain.proto.bankAccount.BankAccountCreatedMessage" = bankaccount
  }

  # Number of retries before giving up connecting to the cluster
  connect-retries = 2
  # Delay between connection retries
  connect-retry-delay = 1s
  # Replication factor to use when creating a keyspace. Is only used when replication-strategy is SimpleStrategy.
  replication-factor = 1
}

cassandra-query-journal {
  refresh-interval = 100ms
}

cassandra-snapshot-store {
  # Comma-separated list of contact points in the cluster.
  contact-points = ["localhost"]
  port = 32784
  keyspace = ${env}"_bankaccount_akka_snapshot"

  # Number of retries before giving up connecting to the cluster
  connect-retries = 2
  # Delay between connection retries
  connect-retry-delay = 1s
  # Replication factor to use when creating a keyspace. Is only used when replication-strategy is SimpleStrategy.
  replication-factor = 1
}

elastic {
  host = "a72ca43efc76542cd360329b66cfbdca.eu-west-1.aws.found.io"
  port = 9243
  shards: 1
  replicas: 1
  indexPrefix = ${env}"_bankaccount"
}
